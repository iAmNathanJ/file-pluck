'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tape = require('tape');

var _tape2 = _interopRequireDefault(_tape);

var _ = require('../');

var _2 = _interopRequireDefault(_);

(0, _tape2['default'])('check for pluckable content', function (t) {

  // TODO
  // Add Regex to delimiter testing ('/***/' will cause problems)

  var p = (0, _2['default'])();

  t.equal(p.pluckable('/*** ***/'), true);
  t.equal(p.pluckable('/** **/'), false);

  t.end();
});

(0, _tape2['default'])('pluck should be a function', function (t) {

  var p = (0, _2['default'])();

  t.equal(typeof p.pluck, 'function');

  t.end();
});

(0, _tape2['default'])('pluck a string from a string', function (t) {

  var p = (0, _2['default'])();

  t.equal(p.pluck('/*** CONTENT ***/'), 'CONTENT');

  t.end();
});

(0, _tape2['default'])('read a string from a file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])();

  p.read(__dirname + '/test-string.css').then(function (str) {
    return t.equal(str, 'test-string');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck a string from file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])();

  p.compile(__dirname + '/test-stylesheet.css').then(function (data) {
    return t.equal(data, '@name: Base Style\n@html: <element class="base"></element>');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck a string from file with custom delimiters', function (t) {

  t.plan(1);

  var p = (0, _2['default'])({
    opening: '/*\n===',
    closing: '===\n*/'
  });

  p.compile(__dirname + '/test-stylesheet2.css').then(function (data) {
    return t.equal(data, '@name: Base Style\n@html: <element class="base"></element>');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('output.wrap should be a function', { skip: true }, function (t) {

  var p = (0, _2['default'])();

  t.equal();

  t.end();
});

(0, _tape2['default'])('output.wrap() should format key/value pairs for json output by default', { skip: true }, function (t) {

  var p = (0, _2['default'])();

  var item = {
    key: 'name',
    val: 'nate'
  };

  t.equal(p.output.wrap(item.key, item.val), '{"name": "nate"}');

  t.end();
});

(0, _tape2['default'])('output.wrap() should format key/value pairs according to override', { skip: true }, function (t) {

  var p = (0, _2['default'])({
    output: {
      wrap: function wrap(key, value) {
        return '{{' + key + '}} / {{' + value + '}}';
      }
    }
  });

  var item = {
    key: 'name',
    val: 'nate'
  };

  t.equal(p.output.wrap(item.key, item.val), '{{name}} / {{nate}}');

  t.end();
});

(0, _tape2['default'])('build(array) should return an array', { skip: true }, function (t) {

  var p = (0, _2['default'])();

  var items = [{ key: 'key1', value: 'val1' }, { key: 'key2', value: 'val2' }, { key: 'key3', value: 'val3' }];

  t.equal(Array.isArray(p.build(items)), true);

  t.end();
});

(0, _tape2['default'])('build(array) return array should be series of key values run through output.wrap() function and separated by output.separator', { skip: true }, function (t) {

  var p = (0, _2['default'])();

  var items = [{ key: 'key1', value: 'val1' }, { key: 'key2', value: 'val2' }, { key: 'key3', value: 'val3' }];

  t.equal(p.build(items), [{ "key1": "val1" }, { "key2": "val2" }, { "key3": "val3" }]);

  t.end();
});

(0, _tape2['default'])('build(notArray) should throw an error if argument is not an array', { skip: true }, function (t) {

  var arg = 'this argument is not an array';

  t.end();
});

//# sourceMappingURL=data:application/json;base64,