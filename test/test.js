'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tape = require('tape');

var _tape2 = _interopRequireDefault(_tape);

var _ = require('../');

var _2 = _interopRequireDefault(_);

(0, _tape2['default'])('check for pluckable content', function (t) {

  // TODO
  // Add Regex to delimiter testing ('/***/' will cause problems)

  var p = (0, _2['default'])();

  t.equal(p.pluckable('/*** ***/'), true);
  t.equal(p.pluckable('/** **/'), false);

  t.end();
});

(0, _tape2['default'])('pluck should be a function', function (t) {

  var p = (0, _2['default'])();

  t.equal(typeof p.pluck, 'function');

  t.end();
});

(0, _tape2['default'])('pluck a string from a string', function (t) {

  var p = (0, _2['default'])();

  t.equal(p.pluck('/*** CONTENT ***/'), 'CONTENT');

  t.end();
});

(0, _tape2['default'])('read a string from a file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])();

  p.read(__dirname + '/test-string.css').then(function (str) {
    return t.equal(str, 'test-string');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck a string from file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])();

  p.compile(__dirname + '/test-stylesheet.css').then(function (data) {
    return t.equal(data, '@name: Base Style\n@html: <element class="base"></element>');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck a string from file with custom delimiters', function (t) {

  t.plan(1);

  var p = (0, _2['default'])({
    opening: '/*\n===',
    closing: '===\n*/'
  });

  p.compile(__dirname + '/test-stylesheet2.css').then(function (data) {
    return t.equal(data, '@name: Base Style\n@html: <element class="base"></element>');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck all snippets from a string', function (t) {

  var p = (0, _2['default'])(),
      str = '/*** SNIPPET 1 ***/ /*** SNIPPET 2 ***/',
      arr = p.pluckAll(str);

  t.ok(Array.isArray(arr), 'pluck all is an array');
  t.looseEqual(arr, ['SNIPPET 1', 'SNIPPET 2']);

  t.end();
});

(0, _tape2['default'])('output.wrap() should format key/value pairs according to override', { skip: true }, function (t) {

  var p = (0, _2['default'])({
    output: {
      wrap: function wrap(key, value) {
        return '{{' + key + '}} / {{' + value + '}}';
      }
    }
  });

  var item = {
    key: 'name',
    val: 'nate'
  };

  t.equal(p.output.wrap(item.key, item.val), '{{name}} / {{nate}}');

  t.end();
});

//# sourceMappingURL=data:application/json;base64,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RUFBSTs7QUFFNUMsTUFBSSxDQUFDLEdBQUcsb0JBQU87TUFDWCxHQUFHLEdBQUcseUNBQXlDO01BQy9DLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUUxQixHQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUNsRCxHQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDOztBQUU5QyxHQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDVCxDQUFDLENBQUM7O0FBR0gsdUJBQUssbUVBQW1FLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLEVBQUUsVUFBQSxDQUFDLEVBQUk7O0FBRTNGLE1BQUksQ0FBQyxHQUFHLG1CQUFNO0FBQ1osVUFBTSxFQUFFO0FBQ04sVUFBSSxFQUFBLGNBQUMsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNmLHNCQUFZLEdBQUcsZUFBVSxLQUFLLFFBQUk7T0FDbkM7S0FDRjtHQUNGLENBQUMsQ0FBQzs7QUFFSCxNQUFJLElBQUksR0FBRztBQUNULE9BQUcsRUFBRSxNQUFNO0FBQ1gsT0FBRyxFQUFFLE1BQU07R0FDWixDQUFDOztBQUVGLEdBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQzs7QUFFbEUsR0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQ1QsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICd0YXBlJztcbmltcG9ydCBwbHVjayBmcm9tICcuLi8nO1xuXG5cblxudGVzdCgnY2hlY2sgZm9yIHBsdWNrYWJsZSBjb250ZW50JywgdCA9PiB7XG5cbiAgLy8gVE9ET1xuICAvLyBBZGQgUmVnZXggdG8gZGVsaW1pdGVyIHRlc3RpbmcgKCcvKioqLycgd2lsbCBjYXVzZSBwcm9ibGVtcylcblxuICBsZXQgcCA9IHBsdWNrKCk7XG5cbiAgdC5lcXVhbChwLnBsdWNrYWJsZSgnLyoqKiAqKiovJyksIHRydWUpO1xuICB0LmVxdWFsKHAucGx1Y2thYmxlKCcvKiogKiovJyksIGZhbHNlKTtcblxuICB0LmVuZCgpO1xufSk7XG5cblxuXG50ZXN0KCdwbHVjayBzaG91bGQgYmUgYSBmdW5jdGlvbicsIHQgPT4ge1xuXG4gIGxldCBwID0gcGx1Y2soKTtcblxuICB0LmVxdWFsKHR5cGVvZiBwLnBsdWNrLCAnZnVuY3Rpb24nKTtcblxuICB0LmVuZCgpO1xufSk7XG5cblxuXG50ZXN0KCdwbHVjayBhIHN0cmluZyBmcm9tIGEgc3RyaW5nJywgdCA9PiB7XG5cbiAgbGV0IHAgPSBwbHVjaygpO1xuICBcbiAgdC5lcXVhbChwLnBsdWNrKCcvKioqIENPTlRFTlQgKioqLycpLCAnQ09OVEVOVCcpO1xuXG4gIHQuZW5kKCk7XG59KTtcblxuXG5cbnRlc3QoJ3JlYWQgYSBzdHJpbmcgZnJvbSBhIGZpbGUnLCB0ID0+IHtcblxuICB0LnBsYW4oMSk7XG5cbiAgbGV0IHAgPSBwbHVjaygpO1xuICBcbiAgcC5yZWFkKF9fZGlybmFtZSArICcvdGVzdC1zdHJpbmcuY3NzJylcbiAgLnRoZW4oIHN0ciA9PiB0LmVxdWFsKHN0ciwgJ3Rlc3Qtc3RyaW5nJykgKVxuICAuY2F0Y2goIGVyciA9PiB0LmZhaWwoZXJyKSApO1xuXG59KTtcblxuXG5cbnRlc3QoJ3BsdWNrIGEgc3RyaW5nIGZyb20gZmlsZScsIHQgPT4ge1xuXG4gIHQucGxhbigxKTtcblxuICBsZXQgcCA9IHBsdWNrKCk7XG5cbiAgcC5jb21waWxlKF9fZGlybmFtZSArICcvdGVzdC1zdHlsZXNoZWV0LmNzcycpXG4gIC50aGVuKCBkYXRhID0+IHQuZXF1YWwoZGF0YSxgQG5hbWU6IEJhc2UgU3R5bGVcXG5AaHRtbDogPGVsZW1lbnQgY2xhc3M9XCJiYXNlXCI+PC9lbGVtZW50PmApIClcbiAgLmNhdGNoKCBlcnIgPT4gdC5mYWlsKGVycikgKVxuXG59KTtcblxuXG5cbnRlc3QoJ3BsdWNrIGEgc3RyaW5nIGZyb20gZmlsZSB3aXRoIGN1c3RvbSBkZWxpbWl0ZXJzJywgdCA9PiB7XG5cbiAgdC5wbGFuKDEpO1xuXG4gIGxldCBwID0gcGx1Y2soe1xuICAgIG9wZW5pbmc6IGAvKlxcbj09PWAsXG4gICAgY2xvc2luZzogYD09PVxcbiovYFxuICB9KTtcblxuICBwLmNvbXBpbGUoX19kaXJuYW1lICsgJy90ZXN0LXN0eWxlc2hlZXQyLmNzcycpXG4gIC50aGVuKCBkYXRhID0+IHQuZXF1YWwoZGF0YSwgYEBuYW1lOiBCYXNlIFN0eWxlXFxuQGh0bWw6IDxlbGVtZW50IGNsYXNzPVwiYmFzZVwiPjwvZWxlbWVudD5gKSApXG4gIC5jYXRjaCggZXJyID0+IHQuZmFpbChlcnIpIClcblxufSk7XG5cblxuXG50ZXN0KCdwbHVjayBhbGwgc25pcHBldHMgZnJvbSBhIHN0cmluZycsIHQgPT4ge1xuXG4gIGxldCBwID0gcGx1Y2soKVxuICAgICwgc3RyID0gJy8qKiogU05JUFBFVCAxICoqKi8gLyoqKiBTTklQUEVUIDIgKioqLydcbiAgICAsIGFyciA9IHAucGx1Y2tBbGwoc3RyKTtcblxuICB0Lm9rKEFycmF5LmlzQXJyYXkoYXJyKSwgJ3BsdWNrIGFsbCBpcyBhbiBhcnJheScpO1xuICB0Lmxvb3NlRXF1YWwoYXJyLCBbJ1NOSVBQRVQgMScsICdTTklQUEVUIDInXSk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuXG5cbnRlc3QoJ291dHB1dC53cmFwKCkgc2hvdWxkIGZvcm1hdCBrZXkvdmFsdWUgcGFpcnMgYWNjb3JkaW5nIHRvIG92ZXJyaWRlJywge3NraXA6IHRydWV9LCB0ID0+IHtcblxuICBsZXQgcCA9IHBsdWNrKHtcbiAgICBvdXRwdXQ6IHtcbiAgICAgIHdyYXAoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYHt7JHtrZXl9fX0gLyB7eyR7dmFsdWV9fX1gXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBpdGVtID0ge1xuICAgIGtleTogJ25hbWUnLFxuICAgIHZhbDogJ25hdGUnXG4gIH07XG5cbiAgdC5lcXVhbChwLm91dHB1dC53cmFwKGl0ZW0ua2V5LCBpdGVtLnZhbCksICd7e25hbWV9fSAvIHt7bmF0ZX19Jyk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuIl19