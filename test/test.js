'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tape = require('tape');

var _tape2 = _interopRequireDefault(_tape);

var _ = require('../');

var _2 = _interopRequireDefault(_);

(0, _tape2['default'])('check for pluckable content', function (t) {

  // TODO
  // Add Regex to delimiter testing ('/***/' will cause problems)

  var p = (0, _2['default'])();

  t.notOk(p.pluckable('***'), 'returns false if no delimiters found');
  t.notOk(p.pluckable('/***'), 'returns false if only one delimiter found');
  t.notOk(p.pluckable('***/'), 'returns false if only one delimiter found');
  t.ok(p.pluckable('/*** ***/'), 'returns true if both delimiters found');

  t.end();
});

(0, _tape2['default'])('pluckSingle should be a function', function (t) {

  var p = (0, _2['default'])();

  t.equal(typeof p.pluckSingle, 'function');

  t.end();
});

(0, _tape2['default'])('pluck a string from a string', function (t) {

  var p = (0, _2['default'])();

  t.throws(p.pluckSingle('***'), 'Throws an error on unpluckable content');
  t.equal(p.pluckSingle('/*** CONTENT ***/'), 'CONTENT');

  t.end();
});

(0, _tape2['default'])('set a limit on plucks', function (t) {

  var p = (0, _2['default'])({
    limit: 2
  });

  t.equal(p.pluck('/*** ITEM1 ***/ /*** ITEM2 ***/ /*** ITEM3 ***/').length, 2);

  t.end();
});

(0, _tape2['default'])('read a string from a file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])();

  p.read(__dirname + '/test-string.css').then(function (str) {
    return t.equal(str, 'test-string');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck all snippets from a string', function (t) {

  var p = (0, _2['default'])(),
      str = '/*** SNIPPET 1 ***/ /*** SNIPPET 2 ***/',
      arr = p.pluck(str);

  t.ok(Array.isArray(arr), 'pluck all is an array');
  t.looseEqual(arr, ['SNIPPET 1', 'SNIPPET 2']);

  t.end();
});

(0, _tape2['default'])('pluck all snippets from file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])();

  p.pluckFile(__dirname + '/test-stylesheet.css').then(function (data) {
    return t.looseEqual(data, ['name { Base Style }\nhtml { <element class="base"></element> }', 'name { Another Style }\nhtml { <element class="another"></element> }']);
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('pluck all snippets from file with custom delimiters', function (t) {

  t.plan(1);

  var p = (0, _2['default'])({
    opening: '/*\n===',
    closing: '===\n*/'
  });

  p.pluckFile(__dirname + '/test-stylesheet2.css').then(function (data) {
    return t.looseEqual(data, ['name { Base Style }\nhtml { <element class="base"></element> }', 'name { Another Style }\nhtml { <element class="another"></element> }']);
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('check snippet for key value pairs', function (t) {

  var p = (0, _2['default'])();

  t.notOk(p.hasKeyValue('KEY VALUE'), 'returns false if no delimiters found');
  t.notOk(p.hasKeyValue('@KEY { VALUE'), 'returns false if partial delimiters found');
  t.ok(p.hasKeyValue('@KEY { VALUE }'), 'returns true if all delimiters found');

  t.end();
});

(0, _tape2['default'])('pair up keys/values from snippet', function (t) {

  var p = (0, _2['default'])();

  t.throws(p.pairUp('KEYVALUE'), 'Throws an error when no key/value pair can be found');

  t.end();
});

(0, _tape2['default'])('produce object from key/values in snippet', function (t) {

  var p = (0, _2['default'])();

  t.looseEquals(p.pairUp('key1 { VALUE1 } --- key2 { VALUE2 }'), { key1: 'VALUE1', key2: 'VALUE2' });

  t.end();
});

(0, _tape2['default'])('produce array of objects from all snippets', function (t) {

  var p = (0, _2['default'])(),
      testArr = ['key1 { VALUE1 } --- key2 { VALUE2 }', 'key1 { VALUE1 } --- key2 { VALUE2 }'],
      shouldBeEqual = [{ key1: 'VALUE1', key2: 'VALUE2' }, { key1: 'VALUE1', key2: 'VALUE2' }];

  t.looseEquals(p.pairUpAll(testArr), shouldBeEqual);

  t.end();
});

(0, _tape2['default'])('write JSON file', function (t) {

  t.plan(1);

  var p = (0, _2['default'])(),
      testArr = ['key1 { VALUE1 } --- key2 { VALUE2 }', 'key1 { VALUE1 } --- key2 { VALUE2 }'],
      shouldBeEqual = [{ key1: 'VALUE1', key2: 'VALUE2' }, { key1: 'VALUE1', key2: 'VALUE2' }];

  var compiled = p.pairUpAll(testArr);

  p.write('test/output.json', compiled).then(function (success) {
    return t.pass('Successfully writes json file');
  })['catch'](function (err) {
    return t.fail(err);
  });
});

(0, _tape2['default'])('output should format key/value pairs according to override', { skip: true }, function (t) {

  var p = (0, _2['default'])({
    output: {
      format: function format(key, value) {
        return '{{' + key + '}} / {{' + value + '}}';
      }
    }
  });

  t.equal(p.output.format('name', 'nate'), '{{name}} / {{nate}}');

  t.end();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7b0JBQWlCLE1BQU07Ozs7Z0JBQ0wsS0FBSzs7OztBQUl2Qix1QkFBSyw2QkFBNkIsRUFBRSxVQUFBLENBQUMsRUFBSTs7Ozs7QUFLdkMsTUFBSSxDQUFDLEdBQUcsb0JBQU8sQ0FBQzs7QUFFaEIsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLHNDQUFzQyxDQUFDLENBQUM7QUFDcEUsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7QUFDMUUsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7QUFDMUUsR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLHVDQUF1QyxDQUFDLENBQUM7O0FBRXhFLEdBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNULENBQUMsQ0FBQzs7QUFJSCx1QkFBSyxrQ0FBa0MsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFNUMsTUFBSSxDQUFDLEdBQUcsb0JBQU8sQ0FBQzs7QUFFaEIsR0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7O0FBRTFDLEdBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNULENBQUMsQ0FBQzs7QUFJSCx1QkFBSyw4QkFBOEIsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFeEMsTUFBSSxDQUFDLEdBQUcsb0JBQU8sQ0FBQzs7QUFFaEIsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLHdDQUF3QyxDQUFDLENBQUM7QUFDekUsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7O0FBRXZELEdBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNULENBQUMsQ0FBQzs7QUFHSCx1QkFBSyx1QkFBdUIsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFakMsTUFBSSxDQUFDLEdBQUcsbUJBQU07QUFDWixTQUFLLEVBQUUsQ0FBQztHQUNULENBQUMsQ0FBQzs7QUFFSCxHQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRTlFLEdBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNULENBQUMsQ0FBQzs7QUFFSCx1QkFBSywyQkFBMkIsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFckMsR0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFVixNQUFJLENBQUMsR0FBRyxvQkFBTyxDQUFDOztBQUVoQixHQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxDQUNyQyxJQUFJLENBQUUsVUFBQSxHQUFHO1dBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDO0dBQUEsQ0FBRSxTQUNyQyxDQUFFLFVBQUEsR0FBRztXQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQUEsQ0FBRSxDQUFDO0NBRTlCLENBQUMsQ0FBQzs7QUFJSCx1QkFBSyxrQ0FBa0MsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFNUMsTUFBSSxDQUFDLEdBQUcsb0JBQU87TUFDWCxHQUFHLEdBQUcseUNBQXlDO01BQy9DLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUV2QixHQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUNsRCxHQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDOztBQUU5QyxHQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDVCxDQUFDLENBQUM7O0FBSUgsdUJBQUssOEJBQThCLEVBQUUsVUFBQSxDQUFDLEVBQUk7O0FBRXhDLEdBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsTUFBSSxDQUFDLEdBQUcsb0JBQU8sQ0FBQzs7QUFFaEIsR0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUMsQ0FDOUMsSUFBSSxDQUFFLFVBQUEsSUFBSTtXQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLDBJQUEwSSxDQUFDO0dBQUEsQ0FBRSxTQUN6SyxDQUFFLFVBQUEsR0FBRztXQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQUEsQ0FBRSxDQUFBO0NBRTdCLENBQUMsQ0FBQzs7QUFJSCx1QkFBSyxxREFBcUQsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFL0QsR0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFVixNQUFJLENBQUMsR0FBRyxtQkFBTTtBQUNaLFdBQU8sV0FBVztBQUNsQixXQUFPLFdBQVc7R0FDbkIsQ0FBQyxDQUFDOztBQUVILEdBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLHVCQUF1QixDQUFDLENBQy9DLElBQUksQ0FBRSxVQUFBLElBQUk7V0FBSSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSwwSUFBMEksQ0FBQztHQUFBLENBQUUsU0FDekssQ0FBRSxVQUFBLEdBQUc7V0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztHQUFBLENBQUUsQ0FBQTtDQUU3QixDQUFDLENBQUM7O0FBSUgsdUJBQUssbUNBQW1DLEVBQUUsVUFBQSxDQUFDLEVBQUk7O0FBRTdDLE1BQUksQ0FBQyxHQUFHLG9CQUFPLENBQUM7O0FBRWhCLEdBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzVFLEdBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFDO0FBQ3BGLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLHNDQUFzQyxDQUFDLENBQUM7O0FBRTlFLEdBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNULENBQUMsQ0FBQzs7QUFJSCx1QkFBSyxrQ0FBa0MsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFNUMsTUFBSSxDQUFDLEdBQUcsb0JBQU8sQ0FBQzs7QUFFaEIsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLHFEQUFxRCxDQUFDLENBQUM7O0FBRXRGLEdBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNULENBQUMsQ0FBQzs7QUFJSCx1QkFBSywyQ0FBMkMsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFckQsTUFBSSxDQUFDLEdBQUcsb0JBQU8sQ0FBQzs7QUFFaEIsR0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLHFDQUFxQyxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDOztBQUVqRyxHQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDVCxDQUFDLENBQUM7O0FBSUgsdUJBQUssNENBQTRDLEVBQUUsVUFBQSxDQUFDLEVBQUk7O0FBRXRELE1BQUksQ0FBQyxHQUFHLG9CQUFPO01BRVgsT0FBTyxHQUFHLENBQ1YscUNBQXFDLEVBQ3JDLHFDQUFxQyxDQUFDO01BRXRDLGFBQWEsR0FBRyxDQUNoQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUNsQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7O0FBRXhDLEdBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQzs7QUFFbkQsR0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQ1QsQ0FBQyxDQUFDOztBQUlILHVCQUFLLGlCQUFpQixFQUFFLFVBQUEsQ0FBQyxFQUFJOztBQUUzQixHQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVWLE1BQUksQ0FBQyxHQUFHLG9CQUFPO01BRVgsT0FBTyxHQUFHLENBQ1YscUNBQXFDLEVBQ3JDLHFDQUFxQyxDQUFDO01BRXRDLGFBQWEsR0FBRyxDQUNoQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUNsQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7O0FBRXhDLE1BQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXBDLEdBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQ3BDLElBQUksQ0FBRSxVQUFBLE9BQU87V0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDO0dBQUEsQ0FBRSxTQUNyRCxDQUFFLFVBQUEsR0FBRztXQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQUEsQ0FBRSxDQUFBO0NBRTdCLENBQUMsQ0FBQzs7QUFJSCx1QkFBSyw0REFBNEQsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBRSxVQUFBLENBQUMsRUFBSTs7QUFFcEYsTUFBSSxDQUFDLEdBQUcsbUJBQU07QUFDWixVQUFNLEVBQUU7QUFDTixZQUFNLEVBQUEsZ0JBQUMsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNqQixzQkFBWSxHQUFHLGVBQVUsS0FBSyxRQUFLO09BQ3BDO0tBQ0Y7R0FDRixDQUFDLENBQUM7O0FBRUgsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQzs7QUFFaEUsR0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQ1QsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICd0YXBlJztcbmltcG9ydCBwbHVjayBmcm9tICcuLi8nO1xuXG5cblxudGVzdCgnY2hlY2sgZm9yIHBsdWNrYWJsZSBjb250ZW50JywgdCA9PiB7XG5cbiAgLy8gVE9ET1xuICAvLyBBZGQgUmVnZXggdG8gZGVsaW1pdGVyIHRlc3RpbmcgKCcvKioqLycgd2lsbCBjYXVzZSBwcm9ibGVtcylcblxuICBsZXQgcCA9IHBsdWNrKCk7XG5cbiAgdC5ub3RPayhwLnBsdWNrYWJsZSgnKioqJyksICdyZXR1cm5zIGZhbHNlIGlmIG5vIGRlbGltaXRlcnMgZm91bmQnKTtcbiAgdC5ub3RPayhwLnBsdWNrYWJsZSgnLyoqKicpLCAncmV0dXJucyBmYWxzZSBpZiBvbmx5IG9uZSBkZWxpbWl0ZXIgZm91bmQnKTtcbiAgdC5ub3RPayhwLnBsdWNrYWJsZSgnKioqLycpLCAncmV0dXJucyBmYWxzZSBpZiBvbmx5IG9uZSBkZWxpbWl0ZXIgZm91bmQnKTtcbiAgdC5vayhwLnBsdWNrYWJsZSgnLyoqKiAqKiovJyksICdyZXR1cm5zIHRydWUgaWYgYm90aCBkZWxpbWl0ZXJzIGZvdW5kJyk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuXG5cblxudGVzdCgncGx1Y2tTaW5nbGUgc2hvdWxkIGJlIGEgZnVuY3Rpb24nLCB0ID0+IHtcblxuICBsZXQgcCA9IHBsdWNrKCk7XG5cbiAgdC5lcXVhbCh0eXBlb2YgcC5wbHVja1NpbmdsZSwgJ2Z1bmN0aW9uJyk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuXG5cblxudGVzdCgncGx1Y2sgYSBzdHJpbmcgZnJvbSBhIHN0cmluZycsIHQgPT4ge1xuXG4gIGxldCBwID0gcGx1Y2soKTtcbiAgXG4gIHQudGhyb3dzKHAucGx1Y2tTaW5nbGUoJyoqKicpLCAnVGhyb3dzIGFuIGVycm9yIG9uIHVucGx1Y2thYmxlIGNvbnRlbnQnKTtcbiAgdC5lcXVhbChwLnBsdWNrU2luZ2xlKCcvKioqIENPTlRFTlQgKioqLycpLCAnQ09OVEVOVCcpO1xuXG4gIHQuZW5kKCk7XG59KTtcblxuXG50ZXN0KCdzZXQgYSBsaW1pdCBvbiBwbHVja3MnLCB0ID0+IHtcblxuICBsZXQgcCA9IHBsdWNrKHtcbiAgICBsaW1pdDogMlxuICB9KTtcblxuICB0LmVxdWFsKHAucGx1Y2soJy8qKiogSVRFTTEgKioqLyAvKioqIElURU0yICoqKi8gLyoqKiBJVEVNMyAqKiovJykubGVuZ3RoLCAyKTtcblxuICB0LmVuZCgpO1xufSk7XG5cbnRlc3QoJ3JlYWQgYSBzdHJpbmcgZnJvbSBhIGZpbGUnLCB0ID0+IHtcblxuICB0LnBsYW4oMSk7XG5cbiAgbGV0IHAgPSBwbHVjaygpO1xuICBcbiAgcC5yZWFkKF9fZGlybmFtZSArICcvdGVzdC1zdHJpbmcuY3NzJylcbiAgLnRoZW4oIHN0ciA9PiB0LmVxdWFsKHN0ciwgJ3Rlc3Qtc3RyaW5nJykgKVxuICAuY2F0Y2goIGVyciA9PiB0LmZhaWwoZXJyKSApO1xuXG59KTtcblxuXG5cbnRlc3QoJ3BsdWNrIGFsbCBzbmlwcGV0cyBmcm9tIGEgc3RyaW5nJywgdCA9PiB7XG5cbiAgbGV0IHAgPSBwbHVjaygpXG4gICAgLCBzdHIgPSAnLyoqKiBTTklQUEVUIDEgKioqLyAvKioqIFNOSVBQRVQgMiAqKiovJ1xuICAgICwgYXJyID0gcC5wbHVjayhzdHIpO1xuXG4gIHQub2soQXJyYXkuaXNBcnJheShhcnIpLCAncGx1Y2sgYWxsIGlzIGFuIGFycmF5Jyk7XG4gIHQubG9vc2VFcXVhbChhcnIsIFsnU05JUFBFVCAxJywgJ1NOSVBQRVQgMiddKTtcblxuICB0LmVuZCgpO1xufSk7XG5cblxuXG50ZXN0KCdwbHVjayBhbGwgc25pcHBldHMgZnJvbSBmaWxlJywgdCA9PiB7XG5cbiAgdC5wbGFuKDEpO1xuXG4gIGxldCBwID0gcGx1Y2soKTtcblxuICBwLnBsdWNrRmlsZShfX2Rpcm5hbWUgKyAnL3Rlc3Qtc3R5bGVzaGVldC5jc3MnKVxuICAudGhlbiggZGF0YSA9PiB0Lmxvb3NlRXF1YWwoZGF0YSwgW2BuYW1lIHsgQmFzZSBTdHlsZSB9XFxuaHRtbCB7IDxlbGVtZW50IGNsYXNzPVwiYmFzZVwiPjwvZWxlbWVudD4gfWAsIGBuYW1lIHsgQW5vdGhlciBTdHlsZSB9XFxuaHRtbCB7IDxlbGVtZW50IGNsYXNzPVwiYW5vdGhlclwiPjwvZWxlbWVudD4gfWBdKSApXG4gIC5jYXRjaCggZXJyID0+IHQuZmFpbChlcnIpIClcblxufSk7XG5cblxuXG50ZXN0KCdwbHVjayBhbGwgc25pcHBldHMgZnJvbSBmaWxlIHdpdGggY3VzdG9tIGRlbGltaXRlcnMnLCB0ID0+IHtcblxuICB0LnBsYW4oMSk7XG5cbiAgbGV0IHAgPSBwbHVjayh7XG4gICAgb3BlbmluZzogYC8qXFxuPT09YCxcbiAgICBjbG9zaW5nOiBgPT09XFxuKi9gXG4gIH0pO1xuXG4gIHAucGx1Y2tGaWxlKF9fZGlybmFtZSArICcvdGVzdC1zdHlsZXNoZWV0Mi5jc3MnKVxuICAudGhlbiggZGF0YSA9PiB0Lmxvb3NlRXF1YWwoZGF0YSwgW2BuYW1lIHsgQmFzZSBTdHlsZSB9XFxuaHRtbCB7IDxlbGVtZW50IGNsYXNzPVwiYmFzZVwiPjwvZWxlbWVudD4gfWAsIGBuYW1lIHsgQW5vdGhlciBTdHlsZSB9XFxuaHRtbCB7IDxlbGVtZW50IGNsYXNzPVwiYW5vdGhlclwiPjwvZWxlbWVudD4gfWBdKSApXG4gIC5jYXRjaCggZXJyID0+IHQuZmFpbChlcnIpIClcblxufSk7XG5cblxuXG50ZXN0KCdjaGVjayBzbmlwcGV0IGZvciBrZXkgdmFsdWUgcGFpcnMnLCB0ID0+IHtcblxuICBsZXQgcCA9IHBsdWNrKCk7XG5cbiAgdC5ub3RPayhwLmhhc0tleVZhbHVlKCdLRVkgVkFMVUUnKSwgJ3JldHVybnMgZmFsc2UgaWYgbm8gZGVsaW1pdGVycyBmb3VuZCcpO1xuICB0Lm5vdE9rKHAuaGFzS2V5VmFsdWUoJ0BLRVkgeyBWQUxVRScpLCAncmV0dXJucyBmYWxzZSBpZiBwYXJ0aWFsIGRlbGltaXRlcnMgZm91bmQnKTtcbiAgdC5vayhwLmhhc0tleVZhbHVlKCdAS0VZIHsgVkFMVUUgfScpLCAncmV0dXJucyB0cnVlIGlmIGFsbCBkZWxpbWl0ZXJzIGZvdW5kJyk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuXG5cblxudGVzdCgncGFpciB1cCBrZXlzL3ZhbHVlcyBmcm9tIHNuaXBwZXQnLCB0ID0+IHtcblxuICBsZXQgcCA9IHBsdWNrKCk7XG5cbiAgdC50aHJvd3MocC5wYWlyVXAoJ0tFWVZBTFVFJyksICdUaHJvd3MgYW4gZXJyb3Igd2hlbiBubyBrZXkvdmFsdWUgcGFpciBjYW4gYmUgZm91bmQnKTtcblxuICB0LmVuZCgpO1xufSk7XG5cblxuXG50ZXN0KCdwcm9kdWNlIG9iamVjdCBmcm9tIGtleS92YWx1ZXMgaW4gc25pcHBldCcsIHQgPT4ge1xuXG4gIGxldCBwID0gcGx1Y2soKTtcblxuICB0Lmxvb3NlRXF1YWxzKHAucGFpclVwKCdrZXkxIHsgVkFMVUUxIH0gLS0tIGtleTIgeyBWQUxVRTIgfScpLCB7a2V5MTogJ1ZBTFVFMScsIGtleTI6ICdWQUxVRTInfSk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuXG5cblxudGVzdCgncHJvZHVjZSBhcnJheSBvZiBvYmplY3RzIGZyb20gYWxsIHNuaXBwZXRzJywgdCA9PiB7XG5cbiAgbGV0IHAgPSBwbHVjaygpXG4gICAgXG4gICAgLCB0ZXN0QXJyID0gW1xuICAgICAgJ2tleTEgeyBWQUxVRTEgfSAtLS0ga2V5MiB7IFZBTFVFMiB9JyxcbiAgICAgICdrZXkxIHsgVkFMVUUxIH0gLS0tIGtleTIgeyBWQUxVRTIgfSddXG4gICAgXG4gICAgLCBzaG91bGRCZUVxdWFsID0gW1xuICAgICAgeyBrZXkxOiAnVkFMVUUxJywga2V5MjogJ1ZBTFVFMicgfSxcbiAgICAgIHsga2V5MTogJ1ZBTFVFMScsIGtleTI6ICdWQUxVRTInIH1dO1xuXG4gIHQubG9vc2VFcXVhbHMocC5wYWlyVXBBbGwodGVzdEFyciksIHNob3VsZEJlRXF1YWwpO1xuXG4gIHQuZW5kKCk7XG59KTtcblxuXG5cbnRlc3QoJ3dyaXRlIEpTT04gZmlsZScsIHQgPT4ge1xuXG4gIHQucGxhbigxKTtcblxuICBsZXQgcCA9IHBsdWNrKClcbiAgICBcbiAgICAsIHRlc3RBcnIgPSBbXG4gICAgICAna2V5MSB7IFZBTFVFMSB9IC0tLSBrZXkyIHsgVkFMVUUyIH0nLFxuICAgICAgJ2tleTEgeyBWQUxVRTEgfSAtLS0ga2V5MiB7IFZBTFVFMiB9J11cbiAgICBcbiAgICAsIHNob3VsZEJlRXF1YWwgPSBbXG4gICAgICB7IGtleTE6ICdWQUxVRTEnLCBrZXkyOiAnVkFMVUUyJyB9LFxuICAgICAgeyBrZXkxOiAnVkFMVUUxJywga2V5MjogJ1ZBTFVFMicgfV07XG5cbiAgbGV0IGNvbXBpbGVkID0gcC5wYWlyVXBBbGwodGVzdEFycik7XG4gIFxuICBwLndyaXRlKCd0ZXN0L291dHB1dC5qc29uJywgY29tcGlsZWQpXG4gIC50aGVuKCBzdWNjZXNzID0+IHQucGFzcygnU3VjY2Vzc2Z1bGx5IHdyaXRlcyBqc29uIGZpbGUnKSApXG4gIC5jYXRjaCggZXJyID0+IHQuZmFpbChlcnIpIClcblxufSk7XG5cblxuXG50ZXN0KCdvdXRwdXQgc2hvdWxkIGZvcm1hdCBrZXkvdmFsdWUgcGFpcnMgYWNjb3JkaW5nIHRvIG92ZXJyaWRlJywge3NraXA6IHRydWV9LCB0ID0+IHtcblxuICBsZXQgcCA9IHBsdWNrKHtcbiAgICBvdXRwdXQ6IHtcbiAgICAgIGZvcm1hdChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBge3ske2tleX19fSAvIHt7JHt2YWx1ZX19fWA7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB0LmVxdWFsKHAub3V0cHV0LmZvcm1hdCgnbmFtZScsICduYXRlJyksICd7e25hbWV9fSAvIHt7bmF0ZX19Jyk7XG5cbiAgdC5lbmQoKTtcbn0pO1xuIl19